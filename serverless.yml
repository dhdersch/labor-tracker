service:
  name: labor-tracker
custom: ${file(serverless-config/${opt:stage, 'dev'}.yml)}
provider:
  name: aws
  runtime: python3.6
  region: ${self:custom.region}
  deploymentBucket: 
    name: labor-tracker
    serverSideEncryption: AES256
  environment:
    PATIENTS_TABLE: patients-${self:custom.stage}
    CLINICIANS_TABLE: clinicians-${self:custom.stage}
    BUCKET: labor-tracker
    MEASUREMENTS_TABLE: measurements-${self:custom.stage}
  profile: ${opt:profile}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["Measurements", "Arn" ] }
    - Effect: Allow
      Action: "s3:*"
      Resource: "arn:aws:s3:::labor-tracker/users/*"
    - Effect: Allow
      Action: s3:ListBucket
      Resource: "arn:aws:s3:::labor-tracker"

package:
  include:
    - endpoints/**
  exclude:
    - serverless-config/**
    - bin/**
    - clients/**
    - node_modules/**
    - openapi/**
    - serverless-config/**
    - venv/**

functions:
  delete_partogram:
    handler: endpoints/delete_partogram.handler
    events:
    - http:
        path: partograms/{partogram_id}
        method: delete
        cors: true
        authorizer: aws_iam

  post_partogram:
    handler: endpoints/post_partogram.handler
    events:
      - http:
          path: partograms
          method: post
          cors: true
          authorizer: aws_iam

  get_measurements:
    handler: endpoints/get_measurements.handler
    events:
    - http:
        path: partograms/{partogram_id}/measurements
        method: get
        cors: true
        authorizer: aws_iam

  delete_measurement:
    handler: endpoints/delete_measurement.handler
    events:
    - http:
        path: partograms/{partogram_id}/measurements/{time}
        method: delete
        cors: true
        authorizer: aws_iam

  post_measurement:
    handler: endpoints/post_measurement.handler
    events:
    - http:
        path: partograms/{partogram_id}/measurements
        method: post
        cors: true
        authorizer: aws_iam

  list_partograms:
    handler: endpoints/list_partograms.handler
    events:
    - http:
        path: partograms
        method: get
        cors: true
        authorizer: aws_iam

  get_patient:
    handler: endpoints/get_patient.handler
    events:
    - http:
        path: patient
        method: get
        cors: true
        authorizer: aws_iam

  update_patient:
    handler: endpoints/update_patient.handler
    events:
    - http:
        path: patient/update
        method: put
        cors: true
        authorizer: aws_iam

  put_patient:
    handler: endpoints/put_patient.handler
    events:
    - http:
        path: patient
        method: put
        cors: true
        authorizer: aws_iam

resources:
  Resources:
    Measurements:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: measurements-${self:custom.stage}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: time
            AttributeType: N
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # Clinicians:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: clinicians-${self:custom.stage}
    #     AttributeDefinitions:
    #       - AttributeName: key
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: key
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1